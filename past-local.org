* Прошедшие локальные митапы

Пожалуйста, добавляйте ссылки на видео и слайды, а также
добавляйте в списки забытые доклады.

** 6 ноября 2015

*** Макросы в Lisp - Михаил Глухов aka rigidus
[[https://www.youtube.com/watch?v=i1lD2J7qLLM][Видео]]

[[http://slides.com/rigidusrigidus/deck-2#/][Слайды]]

*** Template Haskell - Мария Давыдова
[[https://www.youtube.com/watch?v=tFP1-tqzPTI][Видео]]

[[https://github.com/mariyadavydova/notes/blob/master/th/th.pdf][Слайды]]

*** Макросы и парс-трансформации в Erlang - Ринат Идрисов
[[https://www.youtube.com/watch?v=mycxHs4Qu6Q][Видео]]

*** scala.meta — новый подход к метапрограммированию - Михаил Муцянко

*** MiniZinc - Дмитрий Грошев
В этом докладе мы отвлечёмся от традиционного
программирования и поговорим о моделировании. Типы как
средство моделирования крайне популярны сегодня, но
существуют и другие нишевые подходы, в частности, языки
моделирования вроде MiniZinc.

[[https://www.youtube.com/watch?v=pkuTrgeQSyM][Видео]]

** 8 октября 2015

*** Байки из большого erlang-проекта - Алексей Никитин
[[http://tank-bohr.github.io/erlang_talk][Слайды]]

Когда-то мне удалось поработать над очень большим проектом
на эрланге. Хотел бы рассказать как я боролся с эрлангом и
какие шишки при этом набил.

*** core.logic - Андрей Зайцев
1) Расскажет про саму библиотеку, как и для чего ее используют
2) Расскажет, как это работает
3) Поговорит про реляционные интерпретаторы

** 10 сентября 2015

*** Haskell как “другой” язык - Никита Карташов
После небольшого введения в синтаксис на нескольких
показательных примерах будут продемонстрированы выгодные
разительные отличия языка Haskell от других языков.

*** Линзы - Игнат Толчанов
История о том, как простая идея позволяет героически
преодолевать проблему, которая программистам на императивных
языках и не снилась.

*** Clojure Script - Николай Рыжиков
Первое впечатление или функциональный фронтенд.

** 5 августа 2015

*** Data DSL on Clojure — Рыжиков Николай (HealthSamurai)
Код и данные, как Инь и Янь, и граница между ними при
пристальном взгляде начинает исчезать. На примере web стэка
для clojure мы познакомимся c Data DSL — hiccup, honeysql,
prismatic schema, в режиме реального времени попробуем
написать свои DSL и познать Дао.

*** Компьютерная лингвистика на кафедре РВКС — Константин Соколов (ИИТУ СПбПУ)
Это рассказ о нескольких исследовательских проектах,
осуществляющихся в рамках семинара «Понимание естественного
языка» (РВКС, СПбПУ). Речь пойдет об интерпретации голосовых
запросов с помощью проверки моделей, о теоретико-типовой
лексической семантике и о синтаксической разметке корпуса с
помощью интерактивного поиска доказательств. Эти задачи
помогут взглянуть по-новому на теоретические основы
функционального программирования и его практические
приложения.

*** Тестирование на Scala — Иван Анисимов (DINS)
Тестирование приложений — одна из важнейших задач при
разработке ПО. Мы попробуем понять, как написать легко
тестируемые приложения и как нам в этом помогают
функциональные языки. В качестве примера мы рассмотрим два
наиболее популярных инструмента для Scala — ScalaTest и
Scalactic.

** 2 июля 2015

*** Теорема Фишера-Линч-Патерсона - Алексей Чепурной
"Теорема Фишера-Линч-Патерсона (FLP Impossibility Theorem)
является одним из наиболее значимых результатов в изучении
распределенных алгоритмов, о ней не помешает узнать любому
разработчику распределенных систем. Coq, является, с одной
стороны, языком функционального программирования с
зависимыми типами, а с другой — системой доказательств
теорем, основанной на интуиционистской логике.  В
выступлении рассказ будет как о теореме и ее важности для
разработчиков, так и о простом объяснении ее доказательства
в Coq-коде.

*** Reactive Streams (и его реализации на Akka/Scala) - Иван Анисимов

** 15 апреля 2015

[[https://www.youtube.com/watch?v=Dntj_SJSQPU&feature=youtu.be][Видео встречи]]

*** ScalaCheck - Петр Громов

*** Implicits in Scala - Саша Подхалюзин

** 16 января 2015

[[https://www.youtube.com/watch?v=DpMqDsZFaAs&feature=youtu.be][Видео встречи]]

*** Clojure&web: проблемы - Дмитрий Грошев

G+ https://plus.google.com/u/0/+DmitryGroshev/about

[[https://www.youtube.com/watch?v=KkX57Al9uzM#t=3175][Video]]

[[http://si14.github.io/sprug-2015-01-slides/#/][Video]]

Веб-разработка в мейнстримных языках вроде Ruby cломана, и в
Clojure мы по привычке сломали её так же. В докладе мы
поговорим о проблемах с популярными библиотеками для
веб-разработки, потенциальных решениях и открытых вопросах.

*** Компилятор статических сайтов на Clojure - Дмитрий Бушенко

FB https://www.facebook.com/dmitry.bushenko

G+ https://plus.google.com/u/0/117154292545224183708/posts

[[https://www.youtube.com/watch?v=KkX57Al9uzM#t=410][Video]]

Ссылки на проект:

https://github.com/dbushenko/lein-sitecompiler

https://github.com/dbushenko/sitecompiler

*** Возможности планирования NIF в Erlang 17 - Игнат Толчанов
С момента появления NIF к ним предъявлялись достаточно
жёсткие требования по времени выполнения. В докладе пойдёт
речь о механизме, появившемся в Erlang 17, который позволяет
преодолеть это ограничение.

FB https://www.facebook.com/Ignat.Tolchanov

Twitter https://twitter.com/LeebDeveloper

G+ https://plus.google.com/+ИгнатТолчанов/

[[http://www.youtube.com/watch?v=EyNx_3KqCBY#t=684][Video]]

[[http://www.google.com/url?q=http%3A%2F%2Fleebdeveloper.github.io%2Ftalks%2Fnifsched%2F&sa=D&sntz=1&usg=AFQjCNGy4owVwfIOAcPk6hHCqBvdzS_jbw][Slides]]

*** Проект bitFunctor. Распределенная система хранения специфицированных элементов функционального кода - Андрей Ляшин

[[http://www.youtube.com/watch?v=nuJ4Cmg-YcI#t=2509][Video]]

В докладе рассказывается о проекте, ставящего своей целью
создание распределенной программной среды, позволяющей
хранить и осуществлять поиск элементов фунционального кода
(функций и типов), их строгих спецификаций и доказательств
соответствия кода спецификации в рамках среды
Coq. Описываются возможные подходы к созданию подобной
системы, выносятся на обсуждение ряд потенциальных проблем,
могущих возникнуть при ее эксплуaтации. Дается обзор текущей
стадии разработки. Доклад нацелен в большей степени на
профессиональную дискуссию.

*** Программирование — вы делаете это безграмотно! - Глухов Михаил

GitHub https://github.com/rigidus

FB https://www.facebook.com/rigidus?fref=ts

[[http://www.youtube.com/watch?v=EyNx_3KqCBY#t=4230][Video 1]]

[[http://www.youtube.com/watch?v=nuJ4Cmg-YcI][Video 2]]

В докладе вы узнаете о одном из самых недооцененных подходов
в программировании — "Литературном программировании". В
отличии от распространенных подходов (ООП, функциональное
программирование), рассматривающих программу как
иерархический набор идиом (объектов, блоков, фунций) в
Literate Programming программа рассматривается как
"взаимозависимая сеть концепций" и создается как "поток
мысли", проходящий по этой сети в последовательности,
определяемой логикой мышления, что внешне делает форму
описания похожей на литературное эссе.

Дональд Эрвин Кнут, разработчик подхода и автор
всемирно-известной монографии "Искусство программирования"
считает, что без применения этого подхода множество сложных
проектов не могли бы быть созданы и позиционирует Literate
Programming как универсальный способ управления разработкой
больших и сложных проектов, документирования, и обеспечения
взаимодействия программистов.

Сегодня Дональд Кнут является почётным профессором
информатики Стэнфорда и ряда университетов разных стран
мира, в том числе Санкт-Петербургского.

Мы проанализируем идею и методологию литературного
программирования, рассмотрим его инструментальные средства и
попробуем их применить для написания чего-нибудь более
сложного чем HelloWorld.

Также будут продемонстрированы применения метода для разных
языков программирования и интеграция с современными
методологиями разработки ПО.

*** Реализация Use Case архитектуры на clojure с использованием prismatic schema - Николай Рыжиков

** 13 ноября 2014

[[http://www.youtube.com/watch?v=nfKrSI7OQnI][Видео встречи (версия 1)]]

[[https://www.youtube.com/watch?v=4MJrSwqF0hY&feature=youtu.be][Видео встречи (версия 2)]]

Примерная программа:

- Ilshad Khabibullin  - серверная clojure
- Dmitry Groshev - биоинформатика и java 8
- Антон Плешивцев - разпознавание текста
- Alexander Burkov - Property testing
- Николай Рыжиков - Clojure STM
- Nikita Prokopov - DataScript

** 12 декабря 2012

*** Статический анализ и оптимизация кода в GHC - Илья Сергей

[[http://www.youtube.com/watch?v=U2Sk5zo4myE][Видео]]

[[http://www.slideshare.net/ilyasergey/static-analyses-and-code-optimizations-in-glasgow-haskell-compiler][Слайды]]

Glasgow Haskell Compiler — самый популярный из существующих
компиляторов языка программирования Haskell, в котором
реализованы многочисленные оптимизации кода путём
переписывания программ. Корректность такого переписывания
опирается на результаты статических анализов, также
производимых компилятором и предваряющих трансформации.

В этом докладе я расскажу про реализацию и теоретические
основы наиболее интересных статических анализов,
реализованных в GHC: анализа строгости (strictness
analysis), использования (usage analysis) и явного
построения структуры (constructed product result), а также
приведу примеры использования выведенных результатов для
построения оптимизаций. В рамках доклада я сделаю краткий
обзор GHC pipeline, с акцентом на языке промежуточного
представления Core, служащим платформой для анализов и
трансформаций. Наконец, я опишу основной инструментарий из
элементарной теории доменов, необходимой для формулировки и
доказательства корректности анализов.

*** Функции и данные в Kotlin - Андрей Бреслав

[[http://www.youtube.com/watch?v=9x6utkLDBs8][Видео]]

[[https://github.com/abreslav/functions-and-data][Слайды]]

Kotlin — современный статически-типизированный язык
программирования, предназначенный для индустрии. Этот доклад
посвящён тому, какими средствами мы делаем так, чтобы код,
совместимый с Java, выглядел красиво (иногда даже
"функционально"). Разговор пойдёт о некоторых особенностях
системы типов, в частности о совмещении традиционной
типизации с анализом потока данных и о способах объявления
классов и функций.

*** Reducers в Clojure - Дмитрий Грошев

Без сомнения, списочные комбинаторы в Haskell удобны. Кроме
того, они позволяют многим из нас участвовать в
увлекательных соревнованиях в code golf. Однако в следующую
версию Clojure 1.5 войдёт альтернатива традиционным
абстракциям на списках под названием reducers. Библиотека
предлагает бесплатный deforestation и ускорение
существующего кода, использующего map/filter/reduce. В
докладе рассматривается идея reducers, их внутреннее
устройство и возможность применения идеи в других языках.
